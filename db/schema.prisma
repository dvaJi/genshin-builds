// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

model Player {
    id                   String   @id @default(cuid())
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt
    uuid                 String   @unique
    nickname             String
    profilePictureId     Int
    profileCostumeId     Int
    namecardId           Int
    level                Int
    signature            String
    worldLevel           Int
    finishAchievementNum Int
    Build                Build[]
}

model Build {
    id                     String  @id @default(cuid())
    avatarId               Int
    level                  Int
    ascension              Int
    fetterLevel            Int
    constellation          Int
    skillDepotId           Int
    fightProps             String  @db.Text
    skillLevel             String  @db.Text
    critValue              Decimal @default(0)
    critValueArtifactsOnly Decimal @default(0)

    // Plume
    plumeId         Int?
    plumeSetId      Int?
    plumeMainStat   String?  @db.Text
    plumeSubStats   String?  @db.Text
    plumeSubstatsId String?  @db.Text
    plumeCritValue  Decimal?

    // Flower
    flowerId         Int?
    flowerSetId      Int?
    flowerMainStat   String?  @db.Text
    flowerSubStats   String?  @db.Text
    flowerSubstatsId String?  @db.Text
    flowerCritValue  Decimal?

    // Sands
    sandsId         Int?
    sandsSetId      Int?
    sandsMainStat   String?  @db.Text
    sandsSubStats   String?  @db.Text
    sandsSubstatsId String?  @db.Text
    sandsCritValue  Decimal?

    // Goblet
    gobletId         Int?
    gobletSetId      Int?
    gobletMainStat   String?  @db.Text
    gobletSubStats   String?  @db.Text
    gobletSubstatsId String?  @db.Text
    gobletCritValue  Decimal?

    // Circlet
    circletId         Int?
    circletSetId      Int?
    circletMainStat   String?  @db.Text
    circletSubStats   String?  @db.Text
    circletSubstatsId String?  @db.Text
    circletCritValue  Decimal?

    // Weapon
    weaponId           Int
    weaponLevel        Int
    weaponPromoteLevel Int
    weaponRefinement   Int
    weaponStat         String @db.Text

    player   Player @relation(fields: [playerId], references: [id])
    playerId String

    @@index([playerId])
}

model HSRPlayer {
    id                   String     @id @default(cuid())
    createdAt            DateTime   @default(now())
    updatedAt            DateTime   @updatedAt
    uuid                 String     @unique
    nickname             String
    level                Int
    worldLevel           Int
    profilePictureId     Int
    profileCostumeId     Int?
    signature            String
    namecardId           Int?
    finishAchievementNum Int
    avatars              Int
    lightCones           Int
    passAreaProgress     Int
    friends              Int
    Build                HSRBuild[]
}

model HSRBuild {
    id                     String  @id @default(cuid())
    avatarId               Int
    level                  Int
    promotion              Int
    rank                   Int
    skillLevel             String  @db.Text
    critValue              Decimal @default(0)
    critValueArtifactsOnly Decimal @default(0)

    attributes String? @db.Text
    additions  String? @db.Text
    properties String? @db.Text

    // LightCone
    lightConeId        Int?
    lightConeLevel     Int?
    lightConePromotion Int?
    lightConeRank      Int?

    // Head Relic
    headRelicId     Int?
    headRelicSetId  Int?
    headRelicLevel  Int?
    headRelicRarity Int?
    headMainStat    String?  @db.Text
    headSubStats    String?  @db.Text
    headCritValue   Decimal?

    // Hands Relic
    handsRelicId     Int?
    handsRelicSetId  Int?
    handsRelicLevel  Int?
    handsRelicRarity Int?
    handsMainStat    String?  @db.Text
    handsSubStats    String?  @db.Text
    handsCritValue   Decimal?

    // Body Relic
    bodyRelicId     Int?
    bodyRelicSetId  Int?
    bodyRelicLevel  Int?
    bodyRelicRarity Int?
    bodyMainStat    String?  @db.Text
    bodySubStats    String?  @db.Text
    bodyCritValue   Decimal?

    // Feet Relic
    feetRelicId     Int?
    feetRelicSetId  Int?
    feetRelicLevel  Int?
    feetRelicRarity Int?
    feetMainStat    String?  @db.Text
    feetSubStats    String?  @db.Text
    feetCritValue   Decimal?

    // Planar Sphere Relic
    planarSphereRelicId     Int?
    planarSphereRelicSetId  Int?
    planarSphereRelicLevel  Int?
    planarSphereRelicRarity Int?
    planarSphereMainStat    String?  @db.Text
    planarSphereSubStats    String?  @db.Text
    planarSphereCritValue   Decimal?

    // Link Rope Relic
    linkRopeRelicId     Int?
    linkRopeRelicSetId  Int?
    linkRopeRelicLevel  Int?
    linkRopeRelicRarity Int?
    linkRopeMainStat    String?  @db.Text
    linkRopeSubStats    String?  @db.Text
    linkRopeCritValue   Decimal?

    player   HSRPlayer @relation(fields: [playerId], references: [id])
    playerId String

    @@index([playerId])
}

model Account {
    id                       String   @id @default(cuid())
    createdAt                DateTime @default(now())
    updatedAt                DateTime @updatedAt
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?  @db.VarChar(500)
    access_token             String?  @db.VarChar(500)
    refresh_token_expires_in Int?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?  @db.Text
    session_state            String?
    oauth_token_secret       String?
    oauth_token              String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime
    user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String?

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    name          String?   @unique
    globalName    String?
    email         String?   @unique
    password      String?
    emailVerified DateTime?
    image         String?
    role          String?   @default("user")
    link          String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Invite {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String   @unique
    token     String   @unique
    expires   DateTime
}

model BlogPost {
    id           String   @id @default(cuid())
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    slug         String   @unique
    language     String
    game         String
    title        String
    description  String
    image        String
    authorName   String
    authorAvatar String
    authorLink   String
    tags         String
    content      String   @db.Text
    published    Boolean  @default(false)
}

model BlogImages {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    url       String   @unique
    key       String   @unique
    filename  String
    game      String
    type      String
    size      Int?
    width     Int?
    height    Int?
}
